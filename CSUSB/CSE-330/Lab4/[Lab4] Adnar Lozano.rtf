{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red111\green111\blue111;\red47\green231\blue26;\red44\green238\blue235;
\red159\green160\blue28;\red47\green180\blue29;\red74\green0\blue255;}
\margl1440\margr1440\vieww13140\viewh16500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 // Adnar Lozano\cf0 \
\cf2 // CSE 330 Data Structures\cf0 \
\cf2 // Lab 4 (Linked List 2)\cf0 \
\cf2 // 4/26/17\cf0 \
\cf3 #include  \cf4 <iostream>\cf0 \

\f1\b \cf5 using
\f0\b0 \cf0  \cf6 namespace\cf0  std;\
\cf6 class\cf0  Node \{\

\f1\b \cf5 public
\f0\b0 \cf0 :\
        \cf6 int\cf0  data;\
        Node* next;\
\};\
Node* Insert_Tail (Node* head, \cf6 int\cf0  data) \{\
        Node* temp = 
\f1\b \cf5 new
\f0\b0 \cf0  Node();\
        temp->data = data;\
        temp->next = \cf4 NULL\cf0 ;\
        
\f1\b \cf5 if
\f0\b0 \cf0  (head == \cf4 NULL\cf0 ) head = temp;\
        
\f1\b \cf5 else
\f0\b0 \cf0  \{\
                Node* temp1 = 
\f1\b \cf5 new
\f0\b0 \cf0  Node();\
                temp1 = head;\
                
\f1\b \cf5 while
\f0\b0 \cf0  ( temp1->next != \cf4 NULL\cf0 ) temp1 = temp1->next;\
                temp1->next = temp;\
        \}\
        
\f1\b \cf5 return
\f0\b0 \cf0  head;\
\}\
Node* Insert_Head (Node* head, \cf6 int\cf0  data) \{\
        Node* temp = 
\f1\b \cf5 new
\f0\b0 \cf0  Node();\
        temp->data = data;\
        temp->next = \cf4 NULL\cf0 ;\
        
\f1\b \cf5 if
\f0\b0 \cf0 (head != \cf4 NULL\cf0 ) temp->next = head;\
        head = temp;\
        
\f1\b \cf5 return
\f0\b0 \cf0  head;\
\}\
Node* Insert_Nth(Node* head, \cf6 int\cf0  data, \cf6 int\cf0  position) \{\
    Node* temp1 = 
\f1\b \cf5 new
\f0\b0 \cf0  Node();\
    temp1->data = data;\
    temp1->next = \cf4 NULL\cf0 ;\
    
\f1\b \cf5 if
\f0\b0 \cf0  (position == \cf4 1\cf0 ) \{\
        temp1->next = head;\
        head = temp1;\
        
\f1\b \cf5 return
\f0\b0 \cf0  head;\
    \}\
    Node* temp2 = head;\
    
\f1\b \cf5 for
\f0\b0 \cf0  (\cf6 int\cf0  i = \cf4 0\cf0 ; i < position-\cf4 2\cf0 ; i++)\
        temp2 = temp2->next;\
    temp1->next = temp2->next;\
    temp2->next = temp1;\
    
\f1\b \cf5 return
\f0\b0 \cf0  head;\
\}\
Node* Delete(Node* head, \cf6 int\cf0  position) \{\
        Node* temp1 = head;\
        
\f1\b \cf5 if
\f0\b0 \cf0  (position == \cf4 1\cf0 ) \{\
                head = temp1->next;\
                
\f1\b \cf5 delete
\f0\b0 \cf0  temp1;\
                
\f1\b \cf5 return
\f0\b0 \cf0  temp1;\
        \}\
        
\f1\b \cf5 for
\f0\b0 \cf0 (\cf6 int\cf0  i = \cf4 0\cf0 ; i < position-\cf4 2\cf0 ; i++)\
                temp1 = temp1->next;\
        Node *temp2 = temp1->next;\
        temp1->next = temp2->next;\
        
\f1\b \cf5 delete
\f0\b0 \cf0  temp2;\
        
\f1\b \cf5 return
\f0\b0 \cf0  temp1;\
\}\
\cf6 void\cf0  Print(Node* head) \{\
        cout<<\cf4 "List is:\cf7 \\n\cf4 "\cf0 ;\
        
\f1\b \cf5 while
\f0\b0 \cf0  ( head != \cf4 NULL\cf0 ) \{\
                cout << head->data << endl;\
                head = head->next;\
        \}\
        cout << endl;\
\}\
\cf6 void\cf0  ReversePrint(Node *head) \{\
        
\f1\b \cf5 if
\f0\b0 \cf0 (head == \cf4 NULL\cf0 ) 
\f1\b \cf5 return
\f0\b0 \cf0 ;\
        ReversePrint(head->next);\
        cout << head->data << endl;\
\}\
\cf6 int\cf0  CompareLists(Node *headA, Node* headB) \{\
        
\f1\b \cf5 while
\f0\b0 \cf0  (headA != \cf4 NULL\cf0  && headB != \cf4 NULL\cf0 ) \{\
                
\f1\b \cf5 if
\f0\b0 \cf0  (headA->data != headB->data)\
                        
\f1\b \cf5 return
\f0\b0 \cf0  \cf4 0\cf0 ;\
                headA = headA->next;\
                headB = headB->next;\
        \}\
        
\f1\b \cf5 if
\f0\b0 \cf0  (headA == \cf4 NULL\cf0  && headB == \cf4 NULL\cf0 )\
                
\f1\b \cf5 return
\f0\b0 \cf0  \cf4 1\cf0 ;\
        
\f1\b \cf5 else
\f0\b0 \cf0 \
                
\f1\b \cf5 return
\f0\b0 \cf0  \cf4 0\cf0 ;\
\}\cf6 \
int\cf0  main() \{	\
        Node* headA = \cf4 NULL\cf0 ;\
        Node* headB = \cf4 NULL\cf0 ;\
        \cf6 int\cf0  n,x;\
        cout << \cf4 "Getting values for List A using Insert_Head:\cf7 \\n\cf4 U"\cf0 ;\
        cout << \cf4 "how many numbers? \cf7 \\n\cf4 "\cf0 ;\
        cin >> n;\
        
\f1\b \cf5 for
\f0\b0 \cf0  (\cf6 int\cf0  i = \cf4 0\cf0 ; i < n; i++) \{\
                cout<<\cf4 "enter the number: \cf7 \\n\cf4 "\cf0 ;\
                cin>>x;\
                headA = Insert_Head(headA, x);\
                Print(headA);\
        \}\
        cout << \cf4 "Getting values for List B using Insert_Tail:\cf7 \\n\cf4 "\cf0 ;\
        cout << \cf4 "how many numbers? \cf7 \\n\cf4 "\cf0 ;\
        cin >> n;\
        
\f1\b \cf5 for
\f0\b0 \cf0  (\cf6 int\cf0  i = \cf4 0\cf0 ; i < n; i++) \{\
                cout<<\cf4 "enter the number: \cf7 \\n\cf4 "\cf0 ;\
                cin>>x;\
                headB = Insert_Tail(headB, x);\
                Print(headB);\
        \}\
        cout << \cf4 "Printing List A:\cf7 \\n\cf4 "\cf0 ;\
        Print(headA);\
        cout << \cf4 "Printing List B:\cf7 \\n\cf4 "\cf0 ;\
        Print(headB);\
        cout<<\cf4 "Inserting 0 at position 4 of List A :\cf7 \\n\cf4 "\cf0 ;\
        headA = Insert_Nth(headA, \cf4 0\cf0 , \cf4 4\cf0 );\
        Print(headA);\
        cout<<\cf4 "Inserting 0 at position 4 of List B :\cf7 \\n\cf4 "\cf0 ;\
        headB = Insert_Nth(headB, \cf4 0\cf0 , \cf4 4\cf0 );\
        Print(headB);\
        cout<<\cf4 "Deleting position 3 of List A :\cf7 \\n\cf4 "\cf0 ;\
        Delete(headA, \cf4 3\cf0 );\
        Print(headA);\
        cout<<\cf4 "Deleting position 3 of List B :\cf7 \\n\cf4 "\cf0 ;\
        Delete(headB, \cf4 3\cf0 );\
        Print(headB);\
        cout<<\cf4 "Reverse List A is:\cf7 \\n\cf4 "\cf0 ;\
        ReversePrint(headA);\
        cout << endl;\
        cout<<\cf4 "Reverse List B is:\cf7 \\n\cf4 "\cf0 ;\
        ReversePrint(headB);\
        cout << endl;\
        cout << \cf4 "Comparing List A and List B\cf7 \\n\cf4 "\cf0 ;\
        \cf6 int\cf0  r = CompareLists(headA, headB);\
        
\f1\b \cf5 if
\f0\b0 \cf0  (r == \cf4 0\cf0 ) cout << \cf4 "result = "\cf0  << r << \cf4 "\cf7 \\n\cf4 Therefore the lists are not the same\cf7 \\n\cf4 "\cf0 ;\
        
\f1\b \cf5 else
\f0\b0 \cf0  cout << \cf4 "result = "\cf0  << r << \cf4 "\cf7 \\n\cf4 Therefore the lists are the same\cf7 \\n\cf4 "\cf0 ;\
        
\f1\b \cf5 return
\f0\b0 \cf0  \cf4 0\cf0 ;\
\}}